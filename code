import telebot
import random
from telebot import types

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = '7839322062:AAHP2t_01KEBzNhB2EwAsLgB3wc3RqJdEms'
bot = telebot.TeleBot(BOT_TOKEN)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è —Å–ª–æ–≤
word_data = {
    "–±—ã—Ç—å": {
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": ["be", "exist"],
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": ["√™tre", "exister"],
        "–ù–µ–º–µ—Ü–∫–∏–π": ["sein", "existieren"],
    },
    "—Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å": {
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": ["be", "exist"],
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": ["√™tre", "exister"],
        "–ù–µ–º–µ—Ü–∫–∏–π": ["sein", "existieren"],
    },
    "–∏–º–µ—Ç—å": {
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": ["have"],
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": ["avoir"],
        "–ù–µ–º–µ—Ü–∫–∏–π": ["haben"],
    },
    "–∏–¥—Ç–∏": {
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": ["go"],
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": ["aller"],
        "–ù–µ–º–µ—Ü–∫–∏–π": ["gehen"],
    },
    "–æ–±—ä—è—Å–Ω—è—Ç—å": {
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": ["explain"],
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": ["expliquer"],
        "–ù–µ–º–µ—Ü–∫–∏–π": ["erkl√§ren"],
    },
    "–ø—Ä–æ—è—Å–Ω—è—Ç—å": {
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": ["clarify"],
        "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": ["clarifier"],
        "–ù–µ–º–µ—Ü–∫–∏–π": ["kl√§ren"],
    },
}

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
user_progress = {}

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —è–∑—ã–∫–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞
LANGUAGE_FORMS = {
    "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "–∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ",
    "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π": "—Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–æ–≥–æ",
    "–ù–µ–º–µ—Ü–∫–∏–π": "–Ω–µ–º–µ—Ü–∫–æ–≥–æ",
}

def format_language(lang):
    return LANGUAGE_FORMS.get(lang, lang.lower())

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def create_keyboard():
    return types.ReplyKeyboardMarkup(resize_keyboard=True).add(
        "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ", "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å"
    )

main_menu = create_keyboard()

# –°—Ç–∞—Ä—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
@bot.message_handler(commands=['start'])
def start_message(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –∏–∑—É—á–∞—Ç—å —è–∑—ã–∫–∏! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=main_menu
    )

# –ü–æ–¥—Å—á–µ—Ç —Å–ª–æ–≤
@bot.message_handler(func=lambda msg: msg.text == "–ù–∞—á–∞—Ç—å –∏–∑—É—á–µ–Ω–∏–µ")
def start_study(message):
    total_words = len(word_data)
    bot.send_message(
        message.chat.id,
        f"–°–∫–æ–ª—å–∫–æ —Å–ª–æ–≤ —Ö–æ—Ç–∏—Ç–µ –∏–∑—É—á–∏—Ç—å? (–æ—Ç 1 –¥–æ {total_words})",
    )
    bot.register_next_step_handler(message, ask_word_count)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
def ask_word_count(message):
    try:
        word_count = int(message.text.strip())
        if word_count < 1 or word_count > len(word_data):
            raise ValueError
        user_progress[message.from_user.id] = {
            "word_count": word_count,
            "questions": [],
            "correct": 0,
            "wrong": 0,
        }
        send_next_question(message)
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤."
        )
        bot.register_next_step_handler(message, ask_word_count)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
def send_next_question(message):
    user_id = message.from_user.id
    progress = user_progress.get(user_id, {})
    available_words = list(word_data.keys())
    asked_words = progress.get("questions", [])

    remaining_words = [word for word in available_words if word not in asked_words]

    if not remaining_words or len(asked_words) >= progress["word_count"]:
        show_results(message)
        return

    word = random.choice(remaining_words)
    progress["questions"].append(word)

    foreign_language = random.choice(list(word_data[word].keys()))
    foreign_word = random.choice(word_data[word][foreign_language])

    bot.send_message(
        message.chat.id,
        f"–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å {format_language(foreign_language)} \"{foreign_word}\"?"
    )
    bot.register_next_step_handler(message, check_answer, word, foreign_word)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
def check_answer(message, word, correct_word):
    user_id = message.from_user.id
    progress = user_progress[user_id]
    user_answer = message.text.strip().lower()

    correct_answers = [k for k, v in word_data.items() if correct_word in sum(v.values(), [])]

    if user_answer in [ans.lower() for ans in correct_answers]:
        progress["correct"] += 1
        bot.send_message(message.chat.id, "–ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
    else:
        progress["wrong"] += 1
        bot.send_message(
            message.chat.id,
            f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {', '.join(correct_answers)}"
        )
    send_next_question(message)

# –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
def show_results(message):
    user_id = message.from_user.id
    progress = user_progress[user_id]
    bot.send_message(
        message.chat.id,
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {progress['correct']}\n"
        f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {progress['wrong']}",
        reply_markup=main_menu
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ")
def add_word(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ø–ª–∞–≤–∞—Ç—å'):",
    )
    bot.register_next_step_handler(message, ask_translations)

# –ó–∞–ø—Ä–æ—Å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ —Å–ª–æ–≤–∞
def ask_translations(message):
    word = message.text.strip()
    if not word:
        bot.send_message(
            message.chat.id,
            "–°–ª–æ–≤–æ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu
        )
        return

    bot.send_message(
        message.chat.id,
        f"–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥—ã —Å–ª–æ–≤–∞ \"{word}\" –ø–æ –æ—á–µ—Ä–µ–¥–∏. –ü—Ä–∏–º–µ—Ä –≤–≤–æ–¥–∞:\n\n"
        "–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: swim\n–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π: nager\n–ù–µ–º–µ—Ü–∫–∏–π: schwimmen\n\n"
        "–í–≤–µ–¥–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ', –∫–æ–≥–¥–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–æ–≤."
    )
    user_progress[message.from_user.id] = {"word": word, "translations": {}}
    bot.register_next_step_handler(message, collect_translations)

# –°–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–æ–≤
def collect_translations(message):
    user_id = message.from_user.id
    progress = user_progress.get(user_id)

    if not progress:
        bot.send_message(
            message.chat.id,
            "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=main_menu
        )
        return

    word = progress["word"]

    if message.text.lower().strip() == "–≥–æ—Ç–æ–≤–æ":
        if progress["translations"]:
            word_data[word] = progress["translations"]
            bot.send_message(
                message.chat.id,
                f"–°–ª–æ–≤–æ \"{word}\" —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä—å!",
                reply_markup=main_menu
            )
        else:
            bot.send_message(
                message.chat.id,
                "–í—ã –Ω–µ –¥–æ–±–∞–≤–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞. –°–ª–æ–≤–æ –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.",
                reply_markup=main_menu
            )
        user_progress.pop(user_id, None)
        return

    try:
        lang, translation = map(str.strip, message.text.split(":"))
        if lang in ["–ê–Ω–≥–ª–∏–π—Å–∫–∏–π", "–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π", "–ù–µ–º–µ—Ü–∫–∏–π"]:
            progress["translations"].setdefault(lang, []).append(translation)
            bot.send_message(
                message.chat.id,
                f"–ü–µ—Ä–µ–≤–æ–¥ \"{translation}\" –¥–æ–±–∞–≤–ª–µ–Ω –¥–ª—è —è–∑—ã–∫–∞ \"{lang}\".\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –ø–µ—Ä–µ–≤–æ–¥ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è."
            )
        else:
            bot.send_message(
                message.chat.id,
                "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —è–∑—ã–∫. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–æ–ª—å–∫–æ –ê–Ω–≥–ª–∏–π—Å–∫–∏–π, –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∏–ª–∏ –ù–µ–º–µ—Ü–∫–∏–π."
            )
    except ValueError:
        bot.send_message(
            message.chat.id,
            "–û—à–∏–±–∫–∞ –≤–≤–æ–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –Ø–∑—ã–∫: –ø–µ—Ä–µ–≤–æ–¥ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ê–Ω–≥–ª–∏–π—Å–∫–∏–π: swim')."
        )

    bot.register_next_step_handler(message, collect_translations)

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda msg: msg.text == "–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ")
def delete_word(message):
    bot.send_message(
        message.chat.id,
        "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:"
    )
    bot.register_next_step_handler(message, confirm_delete_word)

def confirm_delete_word(message):
    word = message.text.strip()
    if word in word_data:
        del word_data[word]
        bot.send_message(
            message.chat.id,
            f"–°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.",
            reply_markup=main_menu
        )
    else:
        bot.send_message(
            message.chat.id,
            f"–°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Å–ª–æ–≤–∞—Ä–µ.",
            reply_markup=main_menu
        )

# –ü–æ–∫–∞–∑ —Å–ª–æ–≤–∞—Ä—è
@bot.message_handler(func=lambda msg: msg.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª–æ–≤–∞—Ä—å")
def show_dictionary(message):
    if word_data:
        dictionary = "\n".join([
            f"üî∏ {word}:\n" + "\n".join([f"   {lang}: {', '.join(tr)}" for lang, tr in translations.items()])
            for word, translations in word_data.items()
        ])
        bot.send_message(message.chat.id, f"üìö –°–ª–æ–≤–∞—Ä—å:\n{dictionary}")
    else:
        bot.send_message(message.chat.id, "–°–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç.", reply_markup=main_menu)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.infinity_polling()
